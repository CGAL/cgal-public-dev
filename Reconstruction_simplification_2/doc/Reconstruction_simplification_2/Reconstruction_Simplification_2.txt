namespace CGAL {
/*!

\mainpage User Manual 
\anchor Chapter_2D_Reconstruction_Simplification
\cgalAutoToc

\authors Fernando de Goes, Pierre Alliez, Ivo Vigan and Cl√©ment Jamin

\section Reconstruction_simplification_2Introduction Introduction

This package implements a method to reconstruct and simplify 2D point sets \cgalCite{degoes:hal-00758019}. The input is a set of 2D points with mass attributes, possibly hampered by noise and outliers. The output is a set of line segments and isolated points which approximate the input points, as illustrated in Figure \cgalFigureRef{2D_Reconstruction_Simplification_summary}. The mass attribute relates to the importance given to each point for approximation.

\cgalFigureBegin{2D_Reconstruction_Simplification_summary,summary.png}
Left: input point set hampered by noise. Right: The corresponding reconstructed shape consisting of line segments.
\cgalFigureEnd

Internally, the algorithm constructs an initial 2D Delaunay triangulation from all the input points, then simplifies the triangulation so that a subset of the edges and vertices of the triangulation approximate well the input points. Approximate herein refers to a robust distance based on optimal transportation (see advanced section for more details). The triangulation is simplified using a combination of half edge collapse operators and edge flips. The triangulation remains valid during simplification, i.e., with neither overlaps nor fold-overs. 

The output of the reconstruction algorithm is a subset of edges and vertices of the triangulation. Figure \cgalFigureRef{2D_Reconstruction_Simplification_algorithm} depicts an example where the output is composed of green edges and one isolated vertex. The green edges are considered relevant as they approximate well many of the input points. The edges depicted in grey, referred to as ghost edges and discarded, approximate none of the input points. The edges depicted in red, referred to as irrelevant and also discarded, approximate some of the input points but not enough to be considered relevant.

\cgalFigureBegin{2D_Reconstruction_Simplification_algorithm,algorithm.png}
From left to right: input point set; Delaunay triangulation of the input points; After simplification, with ghost edges in grey, relevant edges in green, and irrelevant edges in red; Final reconstruction made up of several edges and one isolated vertex.
\cgalFigureEnd


\subsection Reconstruction_simplification_2Simplest_example Simplest Example
The following example first reads a set of input points from an ASCII file. The points, with no mass attribute, are then passed to the Reconstruction_simplification_2 object. After initializing it, 100 iterations of the reconstruction process are performed. 
\cgalExample{Reconstruction_simplification_2/reconstruction_simplification_2_simplest_example.cpp}

\subsubsection Reconstruction_simplification_2Output_example Output Example
The output of the reconstruction can be obtained in two ways: either as a sequence of points and segments, or as an indexed format when the connectivity of the segments is encoded, hence the terms vertices and edges. The indexed format records a list of points, then pairs of point indices in the said list for the edges, and point indices for isolated vertices. 
\cgalExample{Reconstruction_simplification_2/reconstruction_simplification_2_output_example.cpp}

\subsection Reconstruction_simplification_2Mass_example Example with Mass Attributes
The following example first reads a set of input points and masses from an ASCII file. Using two property maps,  the points and their initial mass are passed to the Reconstruction_simplification_2 object. After initializing it, 100 iterations of the reconstruction process are performed. Lastly, the segments and isolated points of the reconstructed shape are extracted and printed to the console. 
\cgalExample{Reconstruction_simplification_2/reconstruction_simplification_2_mass_example.cpp}


\section Reconstruction_simplification_2API API
The API design is chosen in such a way that most of the implementation details are hidden from the user, i.e., the only class exposed to the user is the <I> Reconstruction_simplification_2 </I>  class.

\subsection Reconstruction_simplification_2Sample Sample Call

\code{.cpp}
/*
K            	     : a geometric kernel.
Point_property_map : a PropertyMap for accessing the input points.
Mass_property_map  : a PropertyMap for accessing the mass attributes of the input points.
*/

Reconstruction_simplification_2<K, Point_property_map, Mass_property_map>
  rs2(points.begin(), points.end(), point_pmap, mass_pmap);

rs2.run(100); // perform 100 contraction steps
\endcode

Alternatively to calling the reconstruction module using
\code{.cpp}
  rs2.run(100);   // perform 100 contraction steps
\endcode

one can use the run_until function
\code{.cpp}
  rs2.run_until(20); // perform edge contractions until only 20 vertices are left.
\endcode
and specify the number of output vertices one wants to keep as illustrated next.

\cgalFigureBegin{2D_Reconstruction_Simplification_twenty_vertices,twenty_vertices.png}
Examples of 20-vertex reconstructions from datasets consisting of 2000, 400 and 200 input points respectively. The examples illustrates the behavior of the algorithm when the input point density decreases. 
\cgalFigureEnd


\subsection Reconstruction_simplification_2Relocation Point Relocation

Since noise and missing data may prevent the reconstructed shape to have sharp corners at the correct places, the algorithm offers a function to relocate all points:
\code{.cpp}
  rs2.relocate_all_points();
\endcode
The new point locations are chosen such that the approximation of the output segments and isolated points to the input points is improved. Note also that an optional parameter of the constructor of the <I> Reconstruction_simplification_2 </I> class provides a means to relocate the points after a specified number of atomic simplification operators.

\cgalFigureBegin{2D_Reconstruction_Simplification_relocation,relocation.png}
Left: before point relocation. Right: after point relocation.
\cgalFigureEnd


\section Reconstruction_simplification_2Parameters User parameters

The behavior of the algorithm is parameterized via five parameters. 

\subsection Reconstruction_simplification_2Flip Edge Flipping

During simplification of the internal triangulation some recursive edge flip operators are required to guarantee that the triangulation remain valid when applying a half edge collapse operator (see Figure \cgalFigureRef{2D_Reconstruction_Simplification_edgeflip}). Calling set_use_flip(false) prevents the algorithm from using edge flips, yielding shorter computational times at the price of suboptimal results as not all edges can be considered for being collapsible.

\cgalFigureBegin{2D_Reconstruction_Simplification_edgeflip,edgeflip.png}
Edge flipping. Left: the blue edge creates fold-overs because of blocking edges shown in black. Middle: after running the recursive edge flipping procedure the blue edge is collapsible. Right: triangulation after collapse.
\cgalFigureEnd

\subsection Reconstruction_simplification_2Relevance Edge Relevance

An edge is relevant from the approximation point of view if (1) it is long, (2) approximates a large number of points (or a large amount of mass when points have mass attributes), and (3) has a small approximation error. The notion of relevance is defined as m(e) x |e|^2 / cost(e), where m(e) denotes the mass of the points approximated by the edge, |e| denotes the edge length and cost(e) its approximation error. As the error is defined by mass time squared distance the relevance is unitless.
The default value is 0, so that all edges approximating some input points are considered relevant.
A larger relevance value provides a means to increase resilience to outliers.

/* FIGURE WITH VARIOUS RELEVANCE VALUES */

\subsection Reconstruction_simplification_2Random Random Sample Size

By default the simplification relies upon an exhaustive priority queue of half edge collapse operators during decimation. For improved efficiency, a parameter <I> sample size </I> strictly greater than 0 switches to a multiple choice approach, i.e., a best-choice selection in a random sample of edge collapse operators, of size sample_size. A typical value for the sample size is 15, but this value must be enlarged when targeting a very coarse simplification. 

\subsection Reconstruction_simplification_2Verbose Verbose Output

The verbose parameter, between 0 and 2, determines how much console output the algorithm generates. A 0 value generates no output to the standard output. A value greater than 0 generates output to the standard output std::cerr.


\section Reconstruction_simplification_2Variable_mass Variable_mass




\section Reconstruction_simplification_2Advanced Advanced

The task addressed here is to reconstruct a shape from a noisy point set \f$ S \f$ in  \f$ \mathbb{R}^2 \f$, i.e., given a set of points in the plane, find a set of points and segments (more formally, a <I> 0-1 simplicial complex </I>) which best approximates \f$ S \f$. 

The approximation error is derived from the theory of optimal transportation between geometric measures. More specifically, the input point set is seen as a discrete measure, ie, a set of pointwise masses. The goal is to find a 0-1 simplicial complex where the edges are the support of a piecewise uniform measure (line density of masses) and the vertices are the support of a discrete measure. Approximating the input point set in our context translates into approximating the input discrete measure by another measure composed of line segments and points.

The algorithm performs a fine to coarse simplification of a triangulation. It starts by putting a bounding box around the input points \f$S\f$ and computes the Delaunay Triangulation  \f$  T_0  \f$  on a subset of \f$  S \f$. \f$ T_0 \f$ is the first output simplex, which is simplified in subsequent iterations by repeated edge collapses. To chose the next edge, a collapse operator is simulated for each feasible edge, i.e., edges which neither introduce overlaps nor fold-overs in the triangulation. The next edge \f$ e \f$ for collapse is chosen according to the overall cost of the transportation plan for \f$ T \setminus e \f$, where the cheapest overall cost is preferred. Since disregarding edges which do not preserve the embedding of the triangulation can severely affect the performance of the greedy approach to optimal transport, the collapse operator is modified by adding a local flip procedure which makes every edge collapsible.


The transportation plan is approximated by assigning each input point temporarily to the closest simplex edge. After this partitioning of the input points w.r.t. the edges, all the points temporarily assigned to a given edge are being assigned to it permanently if and only if the corresponding transportation costs are less than the transportation cost for each of the two vertices of the edge. Otherwise each of the points is assigned to the cheaper of the two vertices. This process of edge contraction and transportation plan update is repeated until the desired number of vertices, specified by the users, has been reached. After that, edges which carry little mass can be filtered out and the remaining edges are reported as reconstructing the input shape. 

*/ 
} /* namespace CGAL */

