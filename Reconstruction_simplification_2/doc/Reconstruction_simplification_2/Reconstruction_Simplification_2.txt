namespace CGAL {
/*!

\mainpage User Manual 
\anchor Chapter_2D_Reconstruction_Simplification
\cgalAutoToc

\authors Fernando de Goes, Pierre Alliez, Ivo Vigan



\section Reconstruction_simplification_2Introduction Introduction


\cgalFigureBegin{2D_Reconstruction_Simplification_process,process.png}
From left to right: input point set; Delaunay triangulation of input; after simplification, with ghost edges in grey, relevant solid edges in green, discarded solid edges in red; final reconstruction.
\cgalFigureEnd

The task addressed here is to reconstruct a shape from a noisy point set S in $R^2$, i.e. give a set of points in the plane, find a <I>0-1 simplex </I>which best approximates the non-noise subset of S. The related task of simplifying a shape finds an approximation of the original shape using simpler curves.

The algorithm (\cgalCite{degoes:hal-00758019}) presented here performs the reconstruction and simplification task jointly using a unifies ed framework based on optimal transports of measures. This new method provides benefits such as robustness to noise, preservation of sharp features and boundaries. An optimal transportation plan is an assignment of the input-points to vertices and edges of an output simplex such that the 2-Wasserstein distance is minimized.

The algorithm can be summarized as: "Considering S as a measure mu consisting of Dirac masses, find a coarse simplicial complex T such that mu is well approximated by a linear combination of uniform measures on the edges and vertices of T."

It performs a course to fine simplification of the output simplex. It starts by putting a bounding box around the input points S and computes the Delaunay Triangulation T_0 on S. T_0 is the first output simplex, which is made courser in subsequent iterations by repeated edge contractions. To chose the next edge, a contraction is  simulated for each feasible edge, i.e., edges which neither introduce overlaps nor fold-overs in the triangulation. The next edge e for contraction is chosen according to the overall cost of the transportation plan T \ e.

The transportation plan is approximated by assigning each input point temporarily to a closest simplex edge. The input point is then permanently assigned to the edge if and only if the corresponding transportation cost is less than the transportation cost for each of the two vertices of the edge. Otherwise it is assigned to the cheaper of the two vertices. 

This sequence of edge contraction and transportation plan update is repeated until the desired number of vertices, specified by the users has been reached. 

After that, edges which carry little mass can be filtered out. 





\section Reconstruction_simplification_2Overview Overview of the Reconstruction Process

The task addressed is to reconstruct a shape from noisy data $S$ in $R^2$, i.e. give a (noisy) set of points, find a shape which best approximates the non-noise subset of $S$. The related task of simplifying a shape finds an approximation of the original shape using simpler curves. While previous works address these two issues sequentially, they are performed jointly using a unified framework based on optimal transport of measures. This new method provides benefits such as robustness to noise, preservation of sharp features and boundaries. It furthermore guarantees that the output is a simplicial complex. Transportation theory studies optimal transportations between a set M of n sources and a set $F$ of n targets (both can for example be point sets in $R^2$). Given a cost function $c : R^2 x R^2 -> R^+$, the goal is to find a bijection between M and F such that the sum of the costs c gets minimized. The optimal transport problem can also be defined between measures, and the paper views reconstruction and simplification tasks as such a transportation problem, where the input points are Dirac measure and the reconstructed simplicial complex is the support of a piecewise uniform measure. Given this theoretical background the algorithm then performs edge contractions in a greedy fashion w.r.t. the transportation cost, until the desired number of vertices are reached.


\section Reconstruction_simplification_2Trans Optimal Transport Formulation

The quality of an output simplex is measured as the total <I>transportation cost</I> of the input to the assigned simplex vertices and edges.
For the transportation cost, the  <I>2-Wasserstein metric</I> is chosen which is also known the <I>Earth Mover Distance</I>, and intuitively 
corresponds to the minimum cost of turning a (unit) pile of sand into a given shape, where the cost is measures as the $L_2$ distances. 

\subsection Reconstruction_simplification_2TransCost Transportation Plan & Cost from Points to Simplices

Assuming that the algorithm is given an output simplex $T$, and a <I>point-to-simplex</I> assignment which maps every input point to either an edge or a vertex of $T$, 
the total transportation cost is then computed using the following rules. For a point to vertex assignment, the cost is simply the sum of the weighted $L_2$-distances of all the points
assigned to the given vertex. 

For an edge of the simplex, the optimal plan and its cost is computed indirectly, by decomposing the transportation plan into a tangential and normal component.  TODO: CONTINUE





\section Reconstruction_simplification_2API API

The API design is chosen in such a way that most of the implementation details are hidden from the user, i.e., the only class
exposed to the user is the <I> Reconstruction_simplification_2</I>  class.

\subsection Reconstruction_simplification_2Sample Sample Call

\code{.cpp}

/*
K            	 : Kernel is the geometric kernel, used for the reconstruction and simplification task.
InputIterator    : InputIterator is the iterator type of the algorithm input.
PointPMap 	 : is a PropertyMap for accessing the input points.
MassPMap	 : MassPMap  is a PropertyMap for accessing the input points'
*/


Reconstruction_simplification_2<K, InputIterator, PointPMap, MassPMap>
    	rs2(points.begin(), points.end(), point_pmap, mass_pmap);

    rs2.initialize();

    rs2.reconstruct(100);

    rs2.extract_solid_eges();

\endcode

\subsection Reconstruction_simplification_2Examples Examples

\subsection Reconstruction_simplification_2ExampleSimple Simple reconstruction Example

The following example illustrates the simplest of the cases. It uses
an ordinary polyhedron and only one of the optional parameters.
The unspecified cost strategy defaults to Lindstrom-Turk.
\cgalExample{Surface_mesh_simplification/edge_collapse_polyhedron.cpp}



*/ 
} /* namespace CGAL */

