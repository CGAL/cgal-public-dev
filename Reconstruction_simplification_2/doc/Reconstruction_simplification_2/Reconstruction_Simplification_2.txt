namespace CGAL {
/*!

\mainpage User Manual 
\anchor Chapter_2D_Reconstruction_Simplification
\cgalAutoToc

\authors Fernando de Goes, Pierre Alliez, Ivo Vigan and Cl√©ment Jamin

\section Reconstruction_simplification_2Introduction Introduction

This package implements a method to reconstruct and simplify 2D point sets The algorithm of \cgalCite{degoes:hal-00758019}. The input is a 2D point set, possibly hampered by noise and outliers. The output is a set of line segments and isolated points which approximate the input shape, where the input points were sampled from, as illustrated in Figure \cgalFigureRef{2D_Reconstruction_Simplification_summary}. 

\cgalFigureBegin{2D_Reconstruction_Simplification_summary,summary.png}
Left: input point set hampered by noise. Right: The corresponding reconstructed shape consisting of line segments.
\cgalFigureEnd


Internally, the algorithm constructs an initial 2D Delaunay triangulation from all the input points, then simplifies the triangulation so that a subset of the edges and vertices of the triangulation approximate well the input points. Approximate herein refers to a robust distance based on optimal transportation (see advanced section below for more details). 

The output of the reconstruction algorithm is a subset of edges and vertices of the triangulation. Figure \cgalFigureRef{2D_Reconstruction_Simplification_algorithm} depicts an example where the output is composed of green edges and one isolated vertex. The green edges are considered relevant as they approximate well many of the input points. The edges depicted in grey, referred to as ghost edges and discarded, are they approximate none of the input points. The edges depicted in red, referred to as irrelevant and also discarded, approximate some of the input points but not enough to be considered relevant.

\cgalFigureBegin{2D_Reconstruction_Simplification_algorithm,algorithm.png}
From left to right: input point set; Delaunay triangulation of the input points; After simplification, with ghost edges in grey, relevant edges in green, and irrelevant edges in red; Final reconstruction made up of several edges and one isolated vertex.
\cgalFigureEnd


\subsection Reconstruction_simplification_2Simplest_example Simplest Example
The following example first reads a set of input points from an ASCII file. The points, with no mass attribute, are then passed to the Reconstruction_simplification_2 object. After initializing it, 100 iterations of the reconstruction process are performed. 
\cgalExample{Reconstruction_simplification_2/reconstruction_simplification_2_simplest_example.cpp}

\subsubsection Reconstruction_simplification_2Output_example Output Example
The output of the reconstruction can be obtained in two ways: either as a sequence of points and segments, or as an indexed format when the connectivity of the segments is encoded, hence the terms vertices and edges. The indexed format records a list of points, then pairs of point indices in the said list for the edges, and point indices for isolated vertices. 
\cgalExample{Reconstruction_simplification_2/reconstruction_simplification_2_output_example.cpp}

\subsection Reconstruction_simplification_2Mass_example Example with mass attributes
The following example first reads a set of input points and masses from an ASCII file. Using two property maps,  the points and their initial mass are passed to the Reconstruction_simplification_2 object. After initializing it, 100 iterations of the reconstruction process are performed. Lastly, the segments and isolated points of the reconstructed shape are extracted and printed to the console. 
\cgalExample{Reconstruction_simplification_2/reconstruction_simplification_2_mass_example.cpp}


\section Reconstruction_simplification_2API API
The API design is chosen in such a way that most of the implementation details are hidden from the user, i.e., the only class exposed to the user is the <I> Reconstruction_simplification_2 </I>  class.

\subsection Reconstruction_simplification_2Sample Sample Call

\code{.cpp}
/*
K            	     : a geometric kernel.
Point_property_map : a PropertyMap for accessing the input points.
Mass_property_map  : a PropertyMap for accessing the mass attributes of the input points.
*/

Reconstruction_simplification_2<K, Point_property_map, Mass_property_map>
  rs2(points.begin(), points.end(), point_pmap, mass_pmap);

rs2.run(100); // perform 100 contraction steps
\endcode

Alternatively to calling the reconstruction module using
\code{.cpp}
  rs2.run(100);   // perform 100 contraction steps
\endcode

one can use the run_until function
\code{.cpp}
  rs2.run_until(20); // perform edge contractions until only 20 vertices are left.
\endcode
and specify the number of output vertices one wants to keep as illustrated next.

\cgalFigureBegin{2D_Reconstruction_Simplification_twenty_vertices,twenty_vertices.png}
Examples of 20-vertex reconstructions from datasets consisting of 2000, 400 and 200 input points respectively. The examples illustrates the behavior of the algorithm when the input point density decreases. 
\cgalFigureEnd


\subsection Reconstruction_simplification_2Relocation Point Relocation

Since noise and missing data may prevent the reconstructed shape to have sharp corners at the correct places, the algorithm offers a function to relocate all points:
\code{.cpp}
  rs2.relocate_all_points();
\endcode
The new locations is chosen such that the approximation of the output segments and isolated points to the input points is improved. An optional parameter in the constructor of the <I> Reconstruction_simplification_2 </I>  class provides a means to relocate the vertices after a specific number of atomic simplification operators.

\cgalFigureBegin{2D_Reconstruction_Simplification_relocation,relocation.png}
Left: before point relocation. Right: after point relocation.
\cgalFigureEnd


\section Reconstruction_simplification_2Parameters User parameters

\subsection Reconstruction_simplification_2Relevance Edge relevance

An edge is relevant from the approximation point of view if it is long, approximates a large number of points (or equivalently the number of points when all masses are equal), and has a small approximation error. This notion is defined as m(e) x |e|^2 / cost(e), where m(e) denotes the mass of the edge, |e| denotes its length and cost(e) its approximation error. As the error is defined by mass time squared distance the relevance is unitless.

The default value is 0, so that all edges approximating some input points are considered relevant.
A larger relevance value provides a means to increase resilience to outliers.


\subsection Reconstruction_simplification_2Random Random Sample Size

By default the simplification relies upon an exhaustive priority queue of edge collapse operators during decimation. For improved efficiency a parameter <I> sample size </I> strictly greater than 0 switches to a multiple choice approach, ie, a best-choice selection in a random sample of edge collapse operators, of size sample_size. A typical value for the sample size is 15, but this value may be enlarged when targeting a very coarse simplification. 

\subsection Reconstruction_simplification_2Verbose Verbose Output

The verbose parameter determines how much console output the algorithm generates. 
A value larger than 0 generates output to the standard output std::cout.




\section Reconstruction_simplification_2Advanced Advanced

More formally, the task addressed here is to reconstruct a shape from a noisy point set \f$ S \f$ in  \f$ \mathbb{R}^2 \f$, i.e., given a set of points in the plane, find a <I>0-1 simplicial complex </I>which best approximates the original shape where the points were sampled from. The related task of simplifying a shape finds an approximation of the original shape using a <I>0-1 simplicial complex </I>.


The algorithm of \cgalCite{degoes:hal-00758019} which is implemented here, performs the reconstruction and simplification task jointly, using a framework based on optimal transportation of discrete measures. This method provides benefits such as robustness to noise, preservation of sharp features and boundaries. An optimal transportation plan is an assignment of the input-points to vertices and edges of an output simplicial complex such that the 2-Wasserstein distance is minimized.

The algorithm can be summarized as: Considering \f$S\f$ as a measure  \f$ \mu \f$ consisting of Dirac masses, find a coarse simplicial complex \f$T\f$ such that  \f$ \mu \f$ is well approximated by a piecewise combination of uniform measure on the edges and vertices of  \f$ T \f$.

It performs a fine to coarse simplification of the output simplex. It starts by putting a bounding box around the input points \f$S\f$ and computes the Delaunay Triangulation  \f$  T_0  \f$  on a subset of \f$  S \f$. \f$ T_0 \f$ is the first output simplex, which is simplified in subsequent iterations by repeated edge contractions. To chose the next edge, a contraction is  simulated for each feasible edge, i.e., edges which neither introduce overlaps nor fold-overs in the triangulation. The next edge \f$ e \f$ for contraction is chosen according to the overall cost of the transportation plan for \f$ T \setminus e \f$, where the cheapest overall cost is preferred. Since disregarding edges which do not preserve the embedding of the triangulation can severely affect the performance of the greedy approach to optimal transport, the contraction operator is modified by adding a local flip procedure which makes every edge contractable.

\cgalFigureBegin{2D_Reconstruction_Simplification_edgeflip,edgeflip.png}
Illustration of an edge flip. In the left image, the blue edge creates fold-overs because of blocking edges shown in black. After running the flipping procedure with the result shown in the middle image, the
 blue edge is contractable, and the contraction results in the image shown on the right.
\cgalFigureEnd



The transportation plan is approximated by assigning each input point temporarily to the closest simplex edge. After this partitioning of the input points w.r.t. the edges, all the points temporarily assigned to a given edge are being assigned to it permanently if and only if the corresponding transportation costs are less than the transportation cost for each of the two vertices of the edge. Otherwise each of the points is assigned to the cheaper of the two vertices. This process of edge contraction and transportation plan update is repeated until the desired number of vertices, specified by the users, has been reached. After that, edges which carry little mass can be filtered out and the remaining edges are reported as reconstructing the input shape. 



While previous work address the reconstruction and simplification tasks sequentially, here they are performed jointly using a framework based on optimal transport of measures. It furthermore guarantees that the output is a simplicial complex. Transportation theory studies optimal transportations between a set \f$M\f$ of \f$n\f$ sources and a set  \f$F \f$ of \f$n\f$ targets (both can be primitives in various dimensions.). Given a cost function  \f$c : \mathbb{R}^2 \times \mathbb{R}^2 \rightarrow \mathbb{R}^+ \f$, the goal is to find a mapping between \f$M\f$ and \f$F\f$ such that the sum of the costs \f$c\f$ gets minimized. The optimal transport problem can also be defined between measures, and here we view the reconstruction and simplification tasks as such a transportation problem, where the input points are Dirac measure and the reconstructed simplicial complex is the support of a piecewise uniform measure. The algorithm then performs edge contractions in a greedy fashion w.r.t. the transportation cost, until the desired number of vertices are reached or a predefined iteration threshold has been exceeded.


\section Reconstruction_simplification_2Trans Optimal Transport Formulation

The quality of the output simplex is measured as the total <I>transportation cost</I> of the input points to their assigned simplex vertices and edges.
For the transportation cost, the  <I>2-Wasserstein metric</I> is chosen which intuitively 
corresponds to the minimum cost of turning a (unit) pile of sand into a given shape, when the cost is measured using the \f$L_2 \f$ distance. 

\subsection Reconstruction_simplification_2TransCost Transportation Plan & Cost from Points to Simplices

Assuming that the algorithm is given an output simplex  \f$T \f$ and a <I>point-to-simplex</I> assignment which maps every input point to either an edge or a vertex of  \f$T \f$, 
the total transportation cost is computed using the following assignment rules: For a point to vertex assignment, the transportation cost is simply the sum of the weighted  \f$L_2 \f$-distance of all the points assigned to the given vertex. 

For an edge \f$e \f$  of the simplex, the optimal transportation plan and its cost is computed indirectly, by decomposing the transportation plan into a tangential and normal component. While the normal plan is simply an orthogonal projection, the tangential plan is slightly more involved. In order to compute it, the algorithm decomposes  \f$e \f$ into bins. This decomposition is done by sorting the projected points on  \f$e \f$ and choosing the length of the  \f$i \f$-th bin as  \f$(m_i / M_e)|e| \f$, with \f$  m_i \f$ denoting the mass of point of the corresponding projected point \f$q_i \f$, while \f$M_e \f$ denotes the sum of the mass of all points assigned to \f$ e \f$ and \f$ |e| \f$ denotes the length of \f$ e \f$. Each projected point  \f$q_i \f$ on  \f$e \f$ is then spread over the  \f$i \f$-th bin. such that we get a uniform measure on  \f$e \f$, which is then used to define an optimal transport from the input points to  \f$e\f$. Because the transport cost is based on the \f$L_2 \f$-distance the decomposition of the transportation plan into a tangential and normal component, the above procedure yields a closed formula for the cost.

\cgalFigureBegin{2D_Reconstruction_Simplification_plan,plan.png}
Illustration of the bins of a simplicial-edge induced by the input points assigned to the edge. These bins are used for computing the tangential transportation cost from the input points to this edge. Note that since the points are all assumed to be of equal weight, all the bins have the same width.
\cgalFigureEnd


*/ 
} /* namespace CGAL */

