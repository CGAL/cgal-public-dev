namespace CGAL {
/*!

\mainpage User Manual 
\anchor Chapter_2D_Reconstruction_Simplification
\cgalAutoToc

\authors Fernando de Goes, Pierre Alliez, Ivo Vigan and Cl√©ment Jamin



\section Reconstruction_simplification_2Introduction Introduction


\cgalFigureBegin{2D_Reconstruction_Simplification_process,process.png}
From left to right: input point set; Delaunay triangulation of input; after simplification, with ghost edges in grey, relevant solid edges in green, discarded solid edges in red; final reconstruction.
\cgalFigureEnd

The task addressed here is to reconstruct a shape from a noisy point set \f$ S \f$ in  \f$ \mathbb{R}^2 \f$, i.e. given a set of points in the plane, find a <I>0-1 simplex </I>which best approximates the non-noise subset of \f$ S \f$. The related task of simplifying a shape finds an approximation of the original shape using simpler curves.

The algorithm of \cgalCite{degoes:hal-00758019} presented here performs the reconstruction and simplification task jointly, using a unified framework based on optimal transports of measures. This new method provides benefits such as robustness to noise, preservation of sharp features and boundaries. An optimal transportation plan is an assignment of the input-points to vertices and edges of an output simplex such that the 2-Wasserstein distance is minimized.

The algorithm can be summarized as: Considering \f$S\f$ as a measure  \f$ \mu \f$ consisting of Dirac masses, find a coarse simplicial complex \f$T\f$ such that  \f$ \mu \f$ is well approximated by a linear combination of uniform measures on the edges and vertices of  \f$ T \f$.

It performs a coarse to fine simplification of the output simplex. It starts by putting a bounding box around the input points \f$S\f$ and computes the Delaunay Triangulation  \f$  T_0  \f$  on  \f$  S \f$. \f$ T_0 \f$ is the first output simplex, which is made courser in subsequent iterations by repeated edge contractions. To chose the next edge, a contraction is  simulated for each feasible edge, i.e., edges which neither introduce overlaps nor fold-overs in the triangulation. The next edge \f$ e \f$ for contraction is chosen according to the overall cost of the transportation plan for \f$ T \setminus e \f$, where the cheapest overall cost is preferred.

\cgalFigureBegin{2D_Reconstruction_Simplification_edgecontraction,edgecontraction.png}
Illustration of an edge contraction, indicated by the blue arrow. The resulting reassignment of the input points to vertices and edges is depicted in green and red respectively.
\cgalFigureEnd


The transportation plan is approximated by assigning each input point temporarily to a closest simplex edge. An input point is then permanently assigned to the edge if and only if the corresponding transportation cost is less than the transportation cost for each of the two vertices of the edge. Otherwise it is assigned to the cheaper of the two vertices. This process of edge contraction and transportation plan update is repeated until the desired number of vertices, specified by the users, has been reached. After that, edges which carry little mass can be filtered out and the remaining edges are reported as reconstructing the input shape.



\section Reconstruction_simplification_2Overview Overview of the Reconstruction Process
While previous works address the reconstruction and simplification tasks sequentially, here they are performed jointly using a unified framework based on optimal transport of measures. This new method provides benefits such as robustness to noise, preservation of sharp features and boundaries. It furthermore guarantees that the output is a simplicial complex. Transportation theory studies optimal transportations between a set \f$M\f$ of \f$n\f$ sources and a set  \f$F \f$ of \f$n\f$ targets (both can be point sets in  \f$ \mathbb{R}^2 \f$). Given a cost function  \f$c : \mathbb{R}^2 \times \mathbb{R}^2 \rightarrow \mathbb{R}^+ \f$, the goal is to find a bijection between \f$M\f$ and \f$F\f$ such that the sum of the costs \f$c\f$ gets minimized. The optimal transport problem can also be defined between measures, and here we view the reconstruction and simplification tasks as such a transportation problem, where the input points are Dirac measure and the reconstructed simplicial complex is the support of a piecewise uniform measure. The algorithm then performs edge contractions in a greedy fashion w.r.t. the transportation cost, until the desired number of vertices are reached or a predefined iteration threshold has been exceeded.


\section Reconstruction_simplification_2Trans Optimal Transport Formulation

The quality of the output simplex is measured as the total <I>transportation cost</I> of the input points to their assigned simplex vertices and edges.
For the transportation cost, the  <I>2-Wasserstein metric</I> is chosen, also known the <I>Earth Mover Distance</I>, it intuitively 
corresponds to the minimum cost of turning a (unit) pile of sand into a given shape, where the cost is measured using the \f$L_2 \f$ distances. 

\subsection Reconstruction_simplification_2TransCost Transportation Plan & Cost from Points to Simplices

Assuming that the algorithm is given an output simplex  \f$T \f$ and a <I>point-to-simplex</I> assignment which maps every input point to either an edge or a vertex of  \f$T \f$, 
the total transportation cost is computed using the following assignment rules: For a point to vertex assignment, the transportation cost is simply the sum of the weighted  \f$L_2 \f$-distances of all the points
assigned to the given vertex. 

For an edge \f$e \f$  of the simplex, the optimal transportation plan and its cost is computed indirectly, by decomposing the transportation plan into a tangential and normal component. While the normal plan is simply an orthogonal projection, the tangential plan is slightly more involved. In order to compute it, we decompose  \f$e \f$ into bins. This decomposition is done by sorting the projected points on  \f$e \f$ and choosing the length of the  \f$i \f$-th bin as  \f$(m_i / M_e)|e| \f$, with \f$  m_i \f$ denoting the mass of point of the corresponding projected point \f$q_i \f$, while \f$M_e \f$ denotes the sum of the mass of all points assigned to \f$ e \f$ and \f$ |e| \f$ denotes the length of \f$ e \f$. Each projected point  \f$q_i \f$ on  \f$e \f$ is then spread over the  \f$i \f$-th bin. such that we get a uniform measure on  \f$e \f$, which is then used to define an optimal transport from the input points to  \f$e\f$.
\cgalFigureBegin{2D_Reconstruction_Simplification_tangentialplan,tangentialplan.png}
Illustration of the bins of a simplicial-edge induced by the input points assigned to the edge. These bins are used for computing the tangential transportation cost from the input points to this edge.
\cgalFigureEnd



\section Reconstruction_simplification_2VertexRelocation Vertex Relocation

Since noise and missing data may prevent the reconstructed shape to have sharp corners, the algorithm offers the possibility to automatically relocate vertices after each edge contraction. The new location of the vertices is chosen such that the fitting of the output triangulation to the input points is improved. This is achieved by minimizing the normal component of their weighted  \f$L_2 \f$ distance. The vertices get relocated only if the resulting triangulation is still embeddable. 


\cgalFigureBegin{2D_Reconstruction_Simplification_vertexrelocation,vertexrelocation.png}
A noisy skyline on the left, and the relocated vertices on the right.
\cgalFigureEnd


\section Reconstruction_simplification_2API API

The API design is chosen in such a way that most of the implementation details are hidden from the user, i.e., the only class
exposed to the user is the <I> Reconstruction_simplification_2</I>  class.

\subsection Reconstruction_simplification_2Sample Sample Call

\code{.cpp}

/*
K            	 : a geometric kernel, used for the reconstruction and simplification task.

input.
PointPMap 		 :  a PropertyMap for accessing the input points.
MassPMap		 : a PropertyMap for accessing the input points'
*/


Reconstruction_simplification_2<K, PointPMap, MassPMap>
    	rs2(points.begin(), points.end(), point_pmap, mass_pmap);

    rs2.reconstruct(100); //perform 100 contraction steps



\endcode

Alternatively to calling the reconstruction module using
\code{.cpp}
  rs2.reconstruct(100);   //perform 100 contraction steps
\endcode

one can use the reconstruct_until function

\code{.cpp}
  rs2.reconstruct_until(20); //perform edge contractions until only  20  vertices are left.
\endcode

 and specify the number of output vertices one wants to keep as illustrated in the following picture.

\cgalFigureBegin{2D_Reconstruction_Simplification_20vertices,20vertices.png}
Example of a reconstructed image where the user specified that the output should consist of  \f$20 \f$ vertices.
\cgalFigureEnd


\subsection Reconstruction_simplification_2Examples Example



The following example shows a simple use case of the Reconstruction_simplification_2 package. 
It works by first reading a collection of input points from an xy-file. Using two property maps,  
the points and their optional initial mass are passed to the Reconstruction_simplification_2 object.
After initializing it, 100 iterations of the reconstruction process are performed. Lastly, the isolated
points and the edges of the reconstructed shape are extracted and printed to the console using the List_output model. 

 

\cgalExample{Reconstruction_simplification_2/reconstruction_simplification_2_example.cpp}



*/ 
} /* namespace CGAL */

